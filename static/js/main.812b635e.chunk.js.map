{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","persistAtom","recoilPersist","storage","localStorage","toDoState","effects_UNSTABLE","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","DOING","DONE","ToDoList","useRecoilState","setCategory","console","log","value","onInput","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.812b635e.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\r\nimport { recoilPersist } from 'recoil-persist';\r\n\r\nexport enum Categories {\r\n    'TO_DO' = 'TO_DO',\r\n    'DOING' = 'DOING',\r\n    'DONE' = 'DONE',\r\n}\r\n\r\nexport interface IToDo {\r\n    text: string;\r\n    id: number;\r\n    category: Categories;\r\n}\r\n\r\nexport const categoryState = atom<Categories>({\r\n    key: 'category',\r\n    default: Categories.TO_DO,\r\n});\r\n\r\nconst { persistAtom } = recoilPersist({\r\n    key: 'todoLocal',\r\n    storage: localStorage,\r\n});\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n    key: 'toDo',\r\n    default: [],\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n    key: 'toDoSelector',\r\n    get: ({ get }) => {\r\n        const toDos = get(toDoState);\r\n        const category = get(categoryState);\r\n        return toDos.filter((toDo) => toDo.category === category);\r\n    },\r\n});\r\n","import { useForm } from 'react-hook-form';\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport { categoryState, toDoState } from '../atoms';\r\n\r\ninterface IForm {\r\n    toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n    const setToDos = useSetRecoilState(toDoState);\r\n    const category = useRecoilValue(categoryState);\r\n    const { register, handleSubmit, setValue } = useForm<IForm>();\r\n    const handleValid = ({ toDo }: IForm) => {\r\n        setToDos((oldToDos) => [{ text: toDo, id: Date.now(), category }, ...oldToDos]);\r\n        setValue('toDo', '');\r\n    };\r\n    return (\r\n        <form onSubmit={handleSubmit(handleValid)}>\r\n            <input\r\n                {...register('toDo', {\r\n                    required: 'Please write a To Do',\r\n                })}\r\n                placeholder=\"Write a to do\"\r\n            />\r\n            <button>Add</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default CreateToDo;\r\n","import React from 'react';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport { Categories, IToDo, toDoState } from '../atoms';\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n    const setToDos = useSetRecoilState(toDoState);\r\n    const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        const {\r\n            currentTarget: { name },\r\n        } = event;\r\n        setToDos((oldToDos) => {\r\n            const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n            const newToDo = { text, id, category: name as any };\r\n            return [...oldToDos.slice(0, targetIndex), newToDo, ...oldToDos.slice(targetIndex + 1)];\r\n        });\r\n    };\r\n    return (\r\n        <li>\r\n            <span>{text}</span>\r\n            {category !== Categories.DOING && (\r\n                <button name={Categories.DOING} onClick={onClick}>\r\n                    Doing\r\n                </button>\r\n            )}\r\n            {category !== Categories.TO_DO && (\r\n                <button name={Categories.TO_DO} onClick={onClick}>\r\n                    To Do\r\n                </button>\r\n            )}\r\n            {category !== Categories.DONE && (\r\n                <button name={Categories.DONE} onClick={onClick}>\r\n                    Done\r\n                </button>\r\n            )}\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default ToDo;\r\n","import React from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { Categories, categoryState, toDoSelector } from '../atoms';\nimport CreateToDo from './CreateToDo';\nimport ToDo from './ToDo';\n\n// // function ToDoList() {\n// //   const [toDo, setToDo] = useState(\"\");\n// //   const onChange = (event: React.FormEvent<HTMLInputElement>) => {\n//     const {\n//       currentTarget: { value },\n//     } = event;\n// let event = {\n// currentTarget : value\n//}\n// //     setToDo(value);\n// //   };\n// 위에 식은 구조분해할당 -> 자바스크립트에서는 객체, 데이터를 생성할 때Array나 Object 형태로 생성을 하는데, 해당 데이터를 가져올 때, const a = array[0] 이나 const a = object.a 라는 형태로 데이터를 가져온다.\n// //   const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n// //     event.preventDefault();\n// //     console.log(toDo);\n// //   };\n// //   return (\n// //     <div>\n// //       <form onSubmit={onSubmit}>\n// //         <input onChange={onChange} value={toDo} placeholder=\"Write a to do\" />\n// //         <button>Add</button>\n// //       </form>\n// //     </div>\n// //   );\n// // }\n\nfunction ToDoList() {\n    const toDos = useRecoilValue(toDoSelector);\n    const [category, setCategory] = useRecoilState(categoryState);\n    const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n        setCategory(event.currentTarget.value as any);\n    };\n    console.log(category);\n\n    return (\n        <div>\n            <h1>To Dos</h1>\n            <hr />\n            <select value={category} onInput={onInput}>\n                <option value={Categories.TO_DO}>To Do</option>\n                <option value={Categories.DOING}>Doing</option>\n                <option value={Categories.DONE}>Done</option>\n            </select>\n            <CreateToDo />\n            {toDos?.map((toDo) => (\n                <ToDo key={toDo.id} {...toDo} />\n            ))}\n        </div>\n    );\n}\n\nexport default ToDoList;\n// handleSubmit을 이용해서 onSubmit 이벤트 대체하기\n// 🔶사용방법\n// const {register, handleSubmit} = useForm();\n// < form onSubmit={handleSubmit(parameter)} >\n// 🔶handleSubmit 함수 설명\n// -첫번째 인자(필수): 데이터가 유효할 때 호출되는 함수\n// -두번째 인자(필수X): 데이터가 유효하지 않을 때 호출되는 함수\n// 🔶input의 유효성 검사하기\n// < input {...register(\"email\",{required: true})} /> 라고 작성하고 input에 값을 적지 않고 내보내면\n// react-hook-form이 값이 유효한지(값이 있는지 없는지) 확인 후 오류가 있는 부분에 커서를 갖다준다.\n// < input {...register(\"email\",{required: true, minLength: 10})} /> 쓰면 글자수도 확인해줌\n","import { createGlobalStyle } from 'styled-components';\nimport ToDoList from './components/ToDoList';\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n    return (\n        <>\n            <GlobalStyle />\n            <ToDoList />\n        </>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n"],"sourceRoot":""}