{"version":3,"sources":["atoms.tsx","components/createCategory.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","customCategoriesState","atom","key","default","JSON","parse","localStorage","getItem","categoryState","TO_DO","persistAtom","recoilPersist","storage","toDoState","effects_UNSTABLE","toDoSelector","selector","get","toDos","category","filter","toDo","CreateCategory","useForm","register","handleSubmit","setValue","errors","formState","useRecoilState","customCategories","setCustomCategories","useEffect","setItem","stringify","onSubmit","customCategory","oldCategories","required","placeholder","type","message","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","oldToDos","text","id","Date","now","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","console","log","DOING","DONE","map","value","i","ToDoList","setCategory","onInput","idx","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"wGAIYA,E,+EAIX,SAJWA,KAAU,cAAVA,EAAU,cAAVA,EAAU,YAIrB,CAJWA,MAAU,KAYf,IAAMC,EAAwBC,YAAe,CAChDC,IAAK,mBACLC,QAASC,KAAKC,MAAMC,aAAaC,QAhBd,0BAgByC,QAGnDC,EAAgBP,YAAiB,CAC1CC,IAAK,WACLC,QAASJ,EAAWU,QAGhBC,EAAgBC,wBAAc,CAClCT,IAAK,YACLU,QAASN,eAFLI,YAKKG,EAAYZ,YAAc,CACnCC,IAAK,OACLC,QAAS,GACTW,iBAAkB,CAACJ,KAGVK,EAAeC,YAAS,CACjCd,IAAK,eACLe,IAAK,YAAc,IAAXA,EAAG,EAAHA,IACEC,EAAQD,EAAIJ,GACZM,EAAWF,EAAIT,GACrB,OAAOU,EAAME,QAAO,SAACC,GAAI,OAAKA,EAAKF,WAAaA,CAAQ,GAC5D,I,sBCIWG,MAnCf,WAA2B,IAAD,EACtB,EAKIC,cAJAC,EAAQ,EAARA,SACAC,EAAY,EAAZA,aACAC,EAAQ,EAARA,SACaC,EAAM,EAAnBC,UAAaD,OAEjB,EAAgDE,YAAe7B,GAAsB,mBAA9E8B,EAAgB,KAAEC,EAAmB,KAa5C,OAJAC,qBAAU,WACN1B,aAAa2B,QAvBE,wBAuBsB7B,KAAK8B,UAAUJ,GACxD,GAAG,CAACA,IAGA,uBAAMK,SAAUV,GAZA,SAAH,GAAmC,IAA7BW,EAAc,EAAdA,eACnBV,EAAS,iBAAkB,IAC3BK,GAAoB,SAACM,GACjB,MAAM,GAAN,mBAAWA,GAAa,CAAED,GAC9B,GACJ,IAO8C,UACtC,iDACQZ,EAAS,iBAAkB,CAC3Bc,SAAU,2GACZ,IACFC,YAAY,0FACZC,KAAK,UAET,kDACA,+BAA4B,QAA5B,EAAOb,EAAOS,sBAAc,aAArB,EAAuBK,YAG1C,EChBeC,MArBf,WACI,IAAMC,EAAWC,YAAkB/B,GAC7BM,EAAW0B,YAAerC,GAChC,EAA6Ce,cAArCC,EAAQ,EAARA,SAAUC,EAAY,EAAZA,aAAcC,EAAQ,EAARA,SAKhC,OACI,uBAAMS,SAAUV,GALA,SAAH,GAAyB,IAAnBJ,EAAI,EAAJA,KACnBsB,GAAS,SAACG,GAAQ,OAAM,CAAEC,KAAM1B,EAAM2B,GAAIC,KAAKC,MAAO/B,aAAU,mBAAK2B,GAAQ,IAC7EpB,EAAS,OAAQ,GACrB,IAE8C,UACtC,iDACQF,EAAS,OAAQ,CACjBc,SAAU,0BACZ,IACFC,YAAY,mBAEhB,2CAGZ,ECsBeY,MA7Cf,SAAc,GAAgC,IAA9BJ,EAAI,EAAJA,KAAM5B,EAAQ,EAARA,SAAU6B,EAAE,EAAFA,GACtBL,EAAWC,YAAkB/B,GACnC,EAAgDgB,YAAe7B,GAAsB,mBAA9E8B,EAAgB,KACjBsB,GADsC,KAC5B,SAACC,GACb,IACqBC,EACjBD,EADAE,cAAiBD,KAErBX,GAAS,SAACG,GACN,IAAMU,EAAcV,EAASW,WAAU,SAACpC,GAAI,OAAKA,EAAK2B,KAAOA,CAAE,IACzDU,EAAU,CAAEX,OAAMC,KAAI7B,SAAUmC,GACtC,MAAM,GAAN,mBAAWR,EAASa,MAAM,EAAGH,IAAY,CAAEE,GAAO,YAAKZ,EAASa,MAAMH,EAAc,IACxF,GACJ,GAEA,OADAI,QAAQC,IAAI1C,GAER,+BACI,+BAAO4B,IACN5B,IAAapB,EAAW+D,OACrB,wBAAQR,KAAMvD,EAAW+D,MAAOV,QAASA,EAAQ,mBAIpDjC,IAAapB,EAAWU,OACrB,wBAAQ6C,KAAMvD,EAAWU,MAAO2C,QAASA,EAAQ,mBAIpDjC,IAAapB,EAAWgE,MACrB,wBAAQT,KAAMvD,EAAWgE,KAAMX,QAASA,EAAQ,kBAInDtB,EAAiBkC,KAAI,SAACC,EAAOC,GAC1B,GAAI/C,IAAaW,EAAiBoC,GAC9B,OACI,wBAAgBd,QAASA,EAASE,KAAMxB,EAAiBoC,GAAG,SACvDpC,EAAiBoC,IADTA,EAKzB,MAGZ,ECwBeC,I,EAAAA,EArCf,WACI,IAAMjD,EAAQ2B,YAAe9B,GAC7B,EAAgCc,YAAerB,GAAc,mBAAtDW,EAAQ,KAAEiD,EAAW,KAI5B,EAAgDvC,YAAe7B,GAAsB,mBAA9E8B,EAAgB,KAQvB,OAR4C,KAC5C8B,QAAQC,IAAI1C,GACZyC,QAAQC,IAAI/B,GAEZE,qBAAU,WACN1B,aAAa2B,QAvCE,wBAuCsB7B,KAAK8B,UAAUJ,GACxD,GAAG,CAACA,IAGA,gCACI,wCACA,uBACA,yBAAQmC,MAAO9C,EAAUkD,QAfjB,SAAChB,GACbe,EAAYf,EAAME,cAAcU,MACpC,EAakD,UACtC,wBAAQA,MAAOlE,EAAWU,MAAM,mBAChC,wBAAQwD,MAAOlE,EAAW+D,MAAM,mBAChC,wBAAQG,MAAOlE,EAAWgE,KAAK,kBAC9BjC,EAAiBkC,KAAI,SAAC5B,EAAgBkC,GAAG,OACtC,wBAAQL,MAAO7B,EAAe,SACzBA,GAD+BkC,EAE3B,OAGjB,cAAC,EAAc,IACf,cAAC,EAAU,IACL,OAALpD,QAAK,IAALA,OAAK,EAALA,EAAO8C,KAAI,SAAC3C,GAAI,OACb,cAAC,EAAI,eAAmBA,GAAbA,EAAK2B,GAAgB,MAIhD,EClEMuB,EAAcC,YAAiB,u+CAuDhB,SAACC,GAAK,OAAKA,EAAMC,MAAMC,OAAO,IACzC,SAACF,GAAK,OAAKA,EAAMC,MAAME,SAAS,IAkB3BC,MATf,WACI,OACI,qCACI,cAACN,EAAW,IACZ,cAAC,EAAQ,MAGrB,ECpEAO,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,IAAU,UACT,cAAC,IAAa,CAACN,MCRkB,CACrCC,QAAS,UACTC,UAAW,QACXK,YAAa,UACbC,YAAa,eDIuB,SAC9B,cAAC,EAAG,UAIVC,SAASC,eAAe,Q","file":"static/js/main.d0681280.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\r\nimport { recoilPersist } from 'recoil-persist';\r\nconst CATEGORIES_KEY = 'additional_categories';\r\n\r\nexport enum Categories {\r\n    'TO_DO' = 'TO_DO',\r\n    'DOING' = 'DOING',\r\n    'DONE' = 'DONE',\r\n}\r\n\r\nexport interface IToDo {\r\n    text: string;\r\n    id: number;\r\n    category: Categories;\r\n}\r\n\r\nexport const customCategoriesState = atom<string[]>({\r\n    key: 'customCategories',\r\n    default: JSON.parse(localStorage.getItem(CATEGORIES_KEY) || '[]'),\r\n});\r\n\r\nexport const categoryState = atom<Categories>({\r\n    key: 'category',\r\n    default: Categories.TO_DO,\r\n});\r\n\r\nconst { persistAtom } = recoilPersist({\r\n    key: 'todoLocal',\r\n    storage: localStorage,\r\n});\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n    key: 'toDo',\r\n    default: [],\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n    key: 'toDoSelector',\r\n    get: ({ get }) => {\r\n        const toDos = get(toDoState);\r\n        const category = get(categoryState);\r\n        return toDos.filter((toDo) => toDo.category === category);\r\n    },\r\n});\r\n","import { useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useRecoilState, useSetRecoilState } from 'recoil';\r\nimport styled from 'styled-components';\r\nimport { categoryState, customCategoriesState } from '../atoms';\r\n\r\nconst CATEGORIES_KEY = 'additional_categories';\r\n\r\ninterface IForm {\r\n    customCategory: string;\r\n}\r\n\r\nfunction CreateCategory() {\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        setValue,\r\n        formState: { errors },\r\n    } = useForm<IForm>();\r\n    const [customCategories, setCustomCategories] = useRecoilState(customCategoriesState);\r\n\r\n    const handleValid = ({ customCategory }: IForm) => {\r\n        setValue('customCategory', '');\r\n        setCustomCategories((oldCategories) => {\r\n            return [...oldCategories, customCategory];\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(CATEGORIES_KEY, JSON.stringify(customCategories));\r\n    }, [customCategories]);\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(handleValid)}>\r\n            <input\r\n                {...register('customCategory', {\r\n                    required: '카테고리를 입력 후 생성을 클릭하세요.',\r\n                })}\r\n                placeholder=\"여기에 새 카테고리를 입력하세요\"\r\n                type=\"text\"\r\n            />\r\n            <button>생성</button>\r\n            <span>{errors.customCategory?.message}</span>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default CreateCategory;\r\n","import { useForm } from 'react-hook-form';\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport { categoryState, toDoState } from '../atoms';\r\n\r\ninterface IForm {\r\n    toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n    const setToDos = useSetRecoilState(toDoState);\r\n    const category = useRecoilValue(categoryState);\r\n    const { register, handleSubmit, setValue } = useForm<IForm>();\r\n    const handleValid = ({ toDo }: IForm) => {\r\n        setToDos((oldToDos) => [{ text: toDo, id: Date.now(), category }, ...oldToDos]);\r\n        setValue('toDo', '');\r\n    };\r\n    return (\r\n        <form onSubmit={handleSubmit(handleValid)}>\r\n            <input\r\n                {...register('toDo', {\r\n                    required: 'Please write a To Do',\r\n                })}\r\n                placeholder=\"Write a to do\"\r\n            />\r\n            <button>Add</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default CreateToDo;\r\n","import React from 'react';\r\nimport { useRecoilState, useSetRecoilState } from 'recoil';\r\nimport { Categories, IToDo, toDoState, customCategoriesState } from '../atoms';\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n    const setToDos = useSetRecoilState(toDoState);\r\n    const [customCategories, setCustomCategories] = useRecoilState(customCategoriesState);\r\n    const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        const {\r\n            currentTarget: { name },\r\n        } = event;\r\n        setToDos((oldToDos) => {\r\n            const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n            const newToDo = { text, id, category: name as any };\r\n            return [...oldToDos.slice(0, targetIndex), newToDo, ...oldToDos.slice(targetIndex + 1)];\r\n        });\r\n    };\r\n    console.log(category);\r\n    return (\r\n        <li>\r\n            <span>{text}</span>\r\n            {category !== Categories.DOING && (\r\n                <button name={Categories.DOING} onClick={onClick}>\r\n                    Doing\r\n                </button>\r\n            )}\r\n            {category !== Categories.TO_DO && (\r\n                <button name={Categories.TO_DO} onClick={onClick}>\r\n                    To Do\r\n                </button>\r\n            )}\r\n            {category !== Categories.DONE && (\r\n                <button name={Categories.DONE} onClick={onClick}>\r\n                    Done\r\n                </button>\r\n            )}\r\n            {customCategories.map((value, i) => {\r\n                if (category !== customCategories[i]) {\r\n                    return (\r\n                        <button key={i} onClick={onClick} name={customCategories[i]}>\r\n                            {customCategories[i]}\r\n                        </button>\r\n                    );\r\n                }\r\n            })}\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default ToDo;\r\n","import React, { useEffect } from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { Categories, categoryState, customCategoriesState, toDoSelector } from '../atoms';\nimport CreateCategory from './createCategory';\nimport CreateToDo from './CreateToDo';\nimport ToDo from './ToDo';\nconst CATEGORIES_KEY = 'additional_categories';\n\n// // function ToDoList() {\n// //   const [toDo, setToDo] = useState(\"\");\n// //   const onChange = (event: React.FormEvent<HTMLInputElement>) => {\n//     const {\n//       currentTarget: { value },\n//     } = event;\n// let event = {\n// currentTarget : value\n//}\n// //     setToDo(value);\n// //   };\n// 위에 식은 구조분해할당 -> 자바스크립트에서는 객체, 데이터를 생성할 때Array나 Object 형태로 생성을 하는데, 해당 데이터를 가져올 때, const a = array[0] 이나 const a = object.a 라는 형태로 데이터를 가져온다.\n// //   const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n// //     event.preventDefault();\n// //     console.log(toDo);\n// //   };\n// //   return (\n// //     <div>\n// //       <form onSubmit={onSubmit}>\n// //         <input onChange={onChange} value={toDo} placeholder=\"Write a to do\" />\n// //         <button>Add</button>\n// //       </form>\n// //     </div>\n// //   );\n// // }\n\nfunction ToDoList() {\n    const toDos = useRecoilValue(toDoSelector);\n    const [category, setCategory] = useRecoilState(categoryState);\n    const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n        setCategory(event.currentTarget.value as any);\n    };\n    const [customCategories, setCustomCategories] = useRecoilState(customCategoriesState);\n    console.log(category);\n    console.log(customCategories);\n\n    useEffect(() => {\n        localStorage.setItem(CATEGORIES_KEY, JSON.stringify(customCategories));\n    }, [customCategories]);\n\n    return (\n        <div>\n            <h1>To Dos</h1>\n            <hr />\n            <select value={category} onInput={onInput}>\n                <option value={Categories.TO_DO}>To Do</option>\n                <option value={Categories.DOING}>Doing</option>\n                <option value={Categories.DONE}>Done</option>\n                {customCategories.map((customCategory, idx) => (\n                    <option value={customCategory} key={idx}>\n                        {customCategory}\n                    </option>\n                ))}\n            </select>\n            <CreateCategory />\n            <CreateToDo />\n            {toDos?.map((toDo) => (\n                <ToDo key={toDo.id} {...toDo} />\n            ))}\n        </div>\n    );\n}\n\nexport default ToDoList;\n// handleSubmit을 이용해서 onSubmit 이벤트 대체하기\n// 🔶사용방법\n// const {register, handleSubmit} = useForm();\n// < form onSubmit={handleSubmit(parameter)} >\n// 🔶handleSubmit 함수 설명\n// -첫번째 인자(필수): 데이터가 유효할 때 호출되는 함수\n// -두번째 인자(필수X): 데이터가 유효하지 않을 때 호출되는 함수\n// 🔶input의 유효성 검사하기\n// < input {...register(\"email\",{required: true})} /> 라고 작성하고 input에 값을 적지 않고 내보내면\n// react-hook-form이 값이 유효한지(값이 있는지 없는지) 확인 후 오류가 있는 부분에 커서를 갖다준다.\n// < input {...register(\"email\",{required: true, minLength: 10})} /> 쓰면 글자수도 확인해줌\n","import { createGlobalStyle } from 'styled-components';\nimport ToDoList from './components/ToDoList';\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n    return (\n        <>\n            <GlobalStyle />\n            <ToDoList />\n        </>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n"],"sourceRoot":""}